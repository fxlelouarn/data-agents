#!/bin/bash

# üõ†Ô∏è Installation de l'environnement de test Data Agents
# Ce script configure tout ce qui est n√©cessaire pour utiliser l'environnement de test

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Fonctions d'affichage
info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

error() {
    echo -e "${RED}‚ùå $1${NC}"
}

step() {
    echo -e "${CYAN}üîß $1${NC}"
}

# Se d√©placer vers le r√©pertoire racine du projet
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
cd "$PROJECT_ROOT"

echo "üß™ Installation de l'environnement de test Data Agents"
echo "====================================================="
echo ""

# 1. V√©rifier les pr√©requis
step "V√©rification des pr√©requis..."

# V√©rifier Node.js
if ! command -v node &> /dev/null; then
    error "Node.js n'est pas install√©. Veuillez installer Node.js 18+ avant de continuer."
    exit 1
fi

NODE_VERSION=$(node -v | cut -d'v' -f2)
MAJOR_VERSION=$(echo $NODE_VERSION | cut -d'.' -f1)

if [ "$MAJOR_VERSION" -lt 18 ]; then
    error "Node.js version 18+ requise. Version actuelle: $NODE_VERSION"
    exit 1
fi

success "Node.js version $NODE_VERSION trouv√©e"

# V√©rifier npm
if ! command -v npm &> /dev/null; then
    error "npm n'est pas install√©"
    exit 1
fi

success "npm $(npm -v) trouv√©"

# 2. V√©rifier la structure du projet
step "V√©rification de la structure du projet..."

if [ ! -f "package.json" ]; then
    error "Fichier package.json manquant. √ätes-vous dans le bon r√©pertoire ?"
    exit 1
fi

if [ ! -d "test-environment" ]; then
    error "R√©pertoire test-environment manquant"
    exit 1
fi

success "Structure du projet v√©rifi√©e"

# 3. Cr√©er les r√©pertoires n√©cessaires
step "Cr√©ation des r√©pertoires n√©cessaires..."

mkdir -p logs
mkdir -p test-environment/outputs
mkdir -p test-environment/outputs/screenshots
mkdir -p test-environment/outputs/html

success "R√©pertoires cr√©√©s"

# 4. Rendre les scripts ex√©cutables
step "Configuration des permissions des scripts..."

chmod +x scripts/test-agent.sh
chmod +x test-environment/console-tester.js

if [ -f "scripts/install-test-environment.sh" ]; then
    chmod +x scripts/install-test-environment.sh
fi

success "Permissions configur√©es"

# 5. Installer les d√©pendances suppl√©mentaires si n√©cessaire
step "V√©rification des d√©pendances..."

# V√©rifier si ts-node est disponible (pour les agents TypeScript)
if ! npm list ts-node &> /dev/null && ! npm list -g ts-node &> /dev/null; then
    warning "ts-node non trouv√©. Installation recommand√©e pour les agents TypeScript:"
    warning "npm install -D ts-node"
fi

# 6. Cr√©er un fichier .gitignore pour les logs
step "Configuration de .gitignore..."

if [ ! -f ".gitignore" ]; then
    touch .gitignore
fi

# Ajouter les patterns n√©cessaires s'ils n'existent pas d√©j√†
grep -qxF "logs/" .gitignore || echo "logs/" >> .gitignore
grep -qxF "test-environment/outputs/" .gitignore || echo "test-environment/outputs/" >> .gitignore
grep -qxF "*.log" .gitignore || echo "*.log" >> .gitignore

success ".gitignore configur√©"

# 7. Tester l'installation
step "Test de l'installation..."

echo ""
info "Test de l'environnement de test..."

# Test basique avec l'agent de test
if ./scripts/test-agent.sh quick test-agent > /dev/null 2>&1; then
    success "Test de l'agent de test : OK"
else
    error "Test de l'agent de test : √âCHEC"
    warning "V√©rifiez les logs ci-dessus pour plus de d√©tails"
fi

# 8. Afficher le r√©sum√©
echo ""
echo "üéâ Installation termin√©e !"
echo "========================"
echo ""
success "L'environnement de test Data Agents est install√© et pr√™t √† utiliser"
echo ""
info "Utilisation rapide :"
echo "  ./scripts/test-agent.sh quick test-agent"
echo "  ./scripts/test-agent.sh debug GoogleSearchDateAgent"
echo "  ./scripts/test-agent.sh interactive test-agent"
echo ""
info "Documentation compl√®te :"
echo "  - README : test-environment/README.md"
echo "  - Scripts : scripts/README.md"
echo ""
info "R√©pertoires cr√©√©s :"
echo "  - logs/                      Logs des tests"
echo "  - test-environment/outputs/  R√©sultats et captures"
echo ""

# 9. V√©rifications optionnelles
step "V√©rifications optionnelles..."

# V√©rifier si des agents r√©els existent
if [ -d "apps/agents/src" ]; then
    AGENT_COUNT=$(find apps/agents/src -name "*.ts" -o -name "*.js" | grep -v test | wc -l)
    if [ "$AGENT_COUNT" -gt 0 ]; then
        success "$AGENT_COUNT agents trouv√©s dans apps/agents/src"
    else
        info "Aucun agent trouv√© dans apps/agents/src"
    fi
else
    info "R√©pertoire apps/agents/src non trouv√© (normal pour certaines configurations)"
fi

# Sugg√©rer la prochaine √©tape
echo ""
warning "Prochaines √©tapes sugg√©r√©es :"
echo "1. Testez l'agent de test : ./scripts/test-agent.sh quick test-agent"
echo "2. Lisez la documentation : cat test-environment/README.md"
echo "3. Configurez vos agents dans test-environment/configs/"
echo "4. Testez vos agents avec --dry-run avant le mode live"
echo ""

success "Installation compl√®te ! üöÄ"