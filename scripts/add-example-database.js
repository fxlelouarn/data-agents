#!/usr/bin/env node

/**
 * Script pour ajouter une base de donn√©es d'exemple √† la configuration
 * 
 * Usage: node scripts/add-example-database.js
 */

const { PrismaClient } = require('@prisma/client')

const prisma = new PrismaClient({
  datasources: {
    db: {
      url: process.env.DATABASE_URL
    }
  }
})

const EXAMPLE_DATABASE = {
  name: 'Miles Republic Production',
  description: 'Base de donn√©es principale de Miles Republic contenant les √©v√©nements, √©ditions et courses',
  type: 'MILES_REPUBLIC',
  isActive: true,
  connectionUrl: process.env.MILES_REPUBLIC_DATABASE_URL,
  tags: ['production', 'events', 'primary'],
  sslMode: 'prefer',
  timeout: 30000,
  maxConnections: 10
}

async function addExampleDatabase() {
  try {
    console.log('üóÑÔ∏è Ajout de la base de donn√©es d\'exemple...')
    
    // V√©rifier si une base avec ce nom existe d√©j√†
    const existingDb = await prisma.databaseConnection.findFirst({
      where: {
        name: EXAMPLE_DATABASE.name
      }
    })
    
    if (existingDb) {
      console.log('‚ö†Ô∏è  Une base de donn√©es avec ce nom existe d√©j√†. Mise √† jour...')
      
      const updatedDb = await prisma.databaseConnection.update({
        where: {
          id: existingDb.id
        },
        data: {
          description: EXAMPLE_DATABASE.description,
          type: EXAMPLE_DATABASE.type,
          isActive: EXAMPLE_DATABASE.isActive,
          connectionUrl: EXAMPLE_DATABASE.connectionUrl,
          tags: EXAMPLE_DATABASE.tags,
          sslMode: EXAMPLE_DATABASE.sslMode,
          timeout: EXAMPLE_DATABASE.timeout,
          maxConnections: EXAMPLE_DATABASE.maxConnections,
          updatedAt: new Date()
        }
      })
      
      console.log('‚úÖ Base de donn√©es mise √† jour avec succ√®s!')
      console.log(`   ID: ${updatedDb.id}`)
      console.log(`   Nom: ${updatedDb.name}`)
      console.log(`   Type: ${updatedDb.type}`)
      console.log(`   Actif: ${updatedDb.isActive}`)
      
    } else {
      const newDb = await prisma.databaseConnection.create({
        data: EXAMPLE_DATABASE
      })
      
      console.log('‚úÖ Base de donn√©es cr√©√©e avec succ√®s!')
      console.log(`   ID: ${newDb.id}`)
      console.log(`   Nom: ${newDb.name}`)
      console.log(`   Type: ${newDb.type}`)
      console.log(`   Actif: ${newDb.isActive}`)
    }
    
    // Afficher les informations de configuration
    console.log('\nüìã Configuration de la base de donn√©es:')
    console.log(`   Description: ${EXAMPLE_DATABASE.description}`)
    console.log(`   URL de connexion: ${EXAMPLE_DATABASE.connectionUrl ? '‚úÖ Configur√©e' : '‚ùå Manquante'}`)
    console.log(`   Tags: ${EXAMPLE_DATABASE.tags.join(', ')}`)
    console.log(`   SSL Mode: ${EXAMPLE_DATABASE.sslMode}`)
    console.log(`   Timeout: ${EXAMPLE_DATABASE.timeout}ms`)
    
    // V√©rifications des variables d'environnement
    console.log('\nüîß Variables d\'environnement:')
    console.log(`   DATABASE_URL: ${process.env.DATABASE_URL ? '‚úÖ Configur√©e' : '‚ùå Manquante'}`)
    console.log(`   MILES_REPUBLIC_DATABASE_URL: ${process.env.MILES_REPUBLIC_DATABASE_URL ? '‚úÖ Configur√©e' : '‚ùå Manquante'}`)
    
    if (!process.env.MILES_REPUBLIC_DATABASE_URL) {
      console.log('\nüí° Note: La variable MILES_REPUBLIC_DATABASE_URL n\'est pas configur√©e.')
      console.log('   Cette base de donn√©es sera marqu√©e comme inactive jusqu\'√† configuration compl√®te.')
      
      // D√©sactiver la base si pas d'URL
      await prisma.databaseConnection.updateMany({
        where: { name: EXAMPLE_DATABASE.name },
        data: { isActive: false }
      })
      console.log('   ‚Üí Base de donn√©es d√©sactiv√©e automatiquement.')
    }
    
  } catch (error) {
    console.error('‚ùå Erreur lors de l\'ajout de la base de donn√©es:', error)
    process.exit(1)
  } finally {
    await prisma.$disconnect()
  }
}

// Fonction pour supprimer la base de donn√©es exemple (utile pour les tests)
async function removeExampleDatabase() {
  try {
    console.log('üóëÔ∏è  Suppression de la base de donn√©es d\'exemple...')
    
    const deletedDb = await prisma.databaseConnection.deleteMany({
      where: {
        name: EXAMPLE_DATABASE.name
      }
    })
    
    console.log(`‚úÖ ${deletedDb.count} base(s) de donn√©es supprim√©e(s)`)
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la suppression:', error)
    process.exit(1)
  } finally {
    await prisma.$disconnect()
  }
}

// Gestion des arguments de ligne de commande
const command = process.argv[2]

if (command === 'remove' || command === '--remove') {
  removeExampleDatabase()
} else {
  addExampleDatabase()
}