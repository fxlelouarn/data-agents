const { PrismaClient } = require('@prisma/client')

async function debugAgents() {
  const prisma = new PrismaClient()
  
  try {
    console.log('üîç √âtat actuel des agents:')
    console.log('=' .repeat(50))
    
    // R√©cup√©rer tous les agents avec leurs stats
    const agents = await prisma.agent.findMany({
      include: {
        runs: {
          orderBy: { startedAt: 'desc' },
          take: 10
        },
        logs: {
          where: {
            OR: [
              { message: { contains: 'd√©sactiv√©' } },
              { message: { contains: 'AUTO_DISABLED' } },
              { message: { contains: '√©checs cons√©cutifs' } }
            ]
          },
          orderBy: { timestamp: 'desc' },
          take: 5
        }
      }
    })
    
    for (const agent of agents) {
      console.log(`\nüìã Agent: ${agent.name} (${agent.id})`)
      console.log(`   √âtat: ${agent.isActive ? '‚úÖ Actif' : '‚ùå Inactif'}`)
      console.log(`   Total runs: ${agent.runs.length}`)
      
      const failedRuns = agent.runs.filter(r => r.status === 'FAILED')
      const successRuns = agent.runs.filter(r => r.status === 'SUCCESS')
      
      console.log(`   Runs √©chou√©s: ${failedRuns.length}`)
      console.log(`   Runs r√©ussis: ${successRuns.length}`)
      
      // Analyser les √©checs cons√©cutifs
      let consecutiveFailures = 0
      for (const run of agent.runs) {
        if (run.status === 'FAILED') {
          consecutiveFailures++
        } else {
          break
        }
      }
      
      console.log(`   √âchecs cons√©cutifs: ${consecutiveFailures}`)
      
      if (agent.logs.length > 0) {
        console.log('   üìù Logs de d√©sactivation:')
        for (const log of agent.logs) {
          console.log(`      ${log.timestamp.toISOString()}: ${log.message}`)
        }
      }
      
      if (agent.runs.length > 0) {
        console.log('   üèÉ Derniers runs:')
        for (const run of agent.runs.slice(0, 3)) {
          console.log(`      ${run.startedAt.toISOString()}: ${run.status} ${run.error ? '- ' + run.error.substring(0, 100) : ''}`)
        }
      }
    }
    
    // V√©rifier les logs r√©cents d'auto-d√©sactivation
    console.log('\nüö® Logs de d√©sactivation automatique:')
    console.log('=' .repeat(50))
    
    const autoDisableLogs = await prisma.agentLog.findMany({
      where: {
        OR: [
          { message: { contains: 'üö® Agent automatiquement d√©sactiv√©' } },
          { message: { contains: 'AUTO_DISABLED_CONSECUTIVE_FAILURES' } }
        ]
      },
      include: {
        agent: true
      },
      orderBy: { timestamp: 'desc' },
      take: 10
    })
    
    if (autoDisableLogs.length === 0) {
      console.log('‚ùå Aucun log de d√©sactivation automatique trouv√©')
    } else {
      for (const log of autoDisableLogs) {
        console.log(`üìù ${log.timestamp.toISOString()} - ${log.agent.name}:`)
        console.log(`   ${log.message}`)
        if (log.data) {
          console.log(`   D√©tails:`, JSON.stringify(log.data, null, 2))
        }
      }
    }
    
  } catch (error) {
    console.error('‚ùå Erreur:', error)
  } finally {
    await prisma.$disconnect()
  }
}

debugAgents()