generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Agent {
  id          String     @id @default(cuid())
  name        String     @unique
  description String?
  type        AgentType
  isActive    Boolean    @default(true)
  frequency   String
  config      Json
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  logs        AgentLog[]
  runs        AgentRun[]
  proposals   Proposal[]
  states      AgentState[]

  @@map("agents")
}

model AgentState {
  id        String   @id @default(cuid())
  agentId   String
  key       String
  value     Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  agent     Agent    @relation(fields: [agentId], references: [id], onDelete: Cascade)

  @@unique([agentId, key])
  @@map("agent_states")
}

model AgentRun {
  id        String     @id @default(cuid())
  agentId   String
  status    RunStatus
  startedAt DateTime   @default(now())
  endedAt   DateTime?
  duration  Int?
  result    Json?
  error     String?
  logs      AgentLog[]
  agent     Agent      @relation(fields: [agentId], references: [id], onDelete: Cascade)

  @@map("agent_runs")
}

model AgentLog {
  id        String    @id @default(cuid())
  agentId   String
  runId     String?
  level     LogLevel
  message   String
  data      Json?
  timestamp DateTime  @default(now())
  agent     Agent     @relation(fields: [agentId], references: [id], onDelete: Cascade)
  run       AgentRun? @relation(fields: [runId], references: [id])

  @@map("agent_logs")
}

model Proposal {
  id            String                @id @default(cuid())
  agentId       String
  type          ProposalType
  status        ProposalStatus        @default(PENDING)
  eventId       String?
  editionId     String?
  raceId        String?
  changes       Json
  justification Json
  confidence    Float?
  // Champs de contexte pour affichage
  eventName     String?
  eventCity     String?
  editionYear   Int?
  raceName      String?
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt
  reviewedAt    DateTime?
  reviewedBy    String?
  agent         Agent                 @relation(fields: [agentId], references: [id], onDelete: Cascade)
  applications  ProposalApplication[]

  @@map("proposals")
}

model ProposalApplication {
  id           String                  @id @default(cuid())
  proposalId   String
  status       ApplicationStatus       @default(PENDING)
  scheduledAt  DateTime?
  appliedAt    DateTime?
  errorMessage String?
  logs         String[]                @default([])
  appliedChanges Json?                
  rollbackData Json?
  createdAt    DateTime                @default(now())
  updatedAt    DateTime                @updatedAt
  proposal     Proposal                @relation(fields: [proposalId], references: [id], onDelete: Cascade)

  @@map("proposal_applications")
}

model DatabaseConnection {
  id             String       @id @default(cuid())
  name           String       @unique
  description    String?
  type           DatabaseType
  isActive       Boolean      @default(true)
  host           String?
  port           Int?
  database       String?
  username       String?
  password       String?
  connectionUrl  String?
  sslMode        String?      @default("prefer")
  timeout        Int?         @default(30000)
  maxConnections Int?         @default(10)
  tags           String[]     @default([])
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  lastTestedAt   DateTime?
  isHealthy      Boolean      @default(false)

  @@map("database_connections")
}

model Settings {
  id                      String   @id @default("singleton") // Un seul enregistrement de settings
  maxConsecutiveFailures  Int      @default(3)
  enableAutoDisabling     Boolean  @default(true)
  checkIntervalMinutes    Int      @default(5)
  meilisearchUrl          String?
  meilisearchApiKey       String?
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  @@map("settings")
}

enum AgentType {
  EXTRACTOR
  COMPARATOR
  VALIDATOR
  CLEANER
  DUPLICATOR
  SPECIFIC_FIELD
}

enum RunStatus {
  PENDING
  RUNNING
  SUCCESS
  FAILED
  CANCELLED
}

enum LogLevel {
  DEBUG
  INFO
  WARN
  ERROR
}

enum ProposalType {
  NEW_EVENT
  EVENT_UPDATE
  EDITION_UPDATE
  RACE_UPDATE
}

enum ProposalStatus {
  PENDING
  APPROVED
  REJECTED
  ARCHIVED
}

enum DatabaseType {
  POSTGRESQL
  MILES_REPUBLIC
}

enum ApplicationStatus {
  PENDING
  APPLIED
  FAILED
}
